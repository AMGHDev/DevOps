{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "masterPrefix": {
            "type": "string",            
            "defaultValue": "pre",
            "metadata": {
                "description": "Initial prefix for all resource names"
            }
        },
        "randomMix": {
            "type": "string",           
            "defaultValue": "X123",
            "metadata": {
                "description": "Environment name for resource naming"
            }
        },
        "eventStoreAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Administrator username on ES VMs"
            }
        },
        "eventStoreAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password on ES VMs"
            }
        },
        "jumpBoxAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Administrator username on JB VM"
            }
        },
        "jumpBoxAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password on JB VM"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_DS1_V2",
            "minLength": 1
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "16.04-LTS",
            "allowedValues": [
                "16.04-LTS"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values are: 15.10, 14.04.4-LTS."
            }
        },
        "instanceCount": {
            "type": "int",
            "metadata": {
                "description": "Number of VM instances (100 or less)"
            },
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 100
        },
        "storageAccountType": {
            "type": "string",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS",
                "Standard_GRS"
            ],
            "defaultValue": "Premium_LRS",
            "metadata": {
                "description": "Replication option for the VM image storage accounts"
            }
        },
        "certificatePassword": {
           "type": "string",
           "metadata": {
                "description": "password to the certificate"
            }
        },
        "certificateBase64EncodedValue": {
           "type": "string",
           "metadata": {
                "description": "Base 64 encoded pfx file cert"
            }
        }
        ,
        "storageSizeInGB": {
           "type": "int",
           "defaultValue": 256,
           "metadata": {
                "description": "Size of data drive for ES servers"
            }
        }
    },
    "variables": {
        "computeLocation": "[resourceGroup().location]",        
        "shortNamingPrefix": "[concat(parameters('masterPrefix'),parameters('randomMix'),'es')]",
        "longNamingPrefix": "[concat(parameters('masterPrefix'),'-',parameters('randomMix'), '-eventstore')]",
        "dnsName": "[variables('longNamingPrefix')]",        
        "eventStoreName": "[variables('longNamingPrefix')]",
        "externalSubnetPrefix": "10.0.2.0/24",
        "internalSubnetPrefix": "10.0.3.0/28",        
        "externalSubnetName": "[concat(variables('longNamingPrefix'), '-subnet-external')]",
        "internalSubnetName": "[concat(variables('longNamingPrefix'), '-subnet-internal')]",
        "virtualNetworkName": "[concat(variables('longNamingPrefix'), '-vnet')]",
        "publicIPAddressName": "[concat(variables('longNamingPrefix'), '-web-ip')]",        
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "ipConfigName": "[concat(variables('longNamingPrefix'), '-ipconfig')]",        
        "networkSecurityGroupName": "[concat(variables('longNamingPrefix'), '-nsg')]",
        "loadBalancerName": "[concat(variables('longNamingPrefix'),'-loadbalancer')]",
        "loadBalancerIpAddressName": "[concat(variables('longNamingPrefix'), '-lb-ip')]",
        "loadBalancerId": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
        "diagnosticsStorageAccountName": "[concat(variables('shortNamingPrefix'),'diagstorage')]",

        "osType": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
        },
        "imageReference": "[variables('osType')]",              

        "jumpBoxName": "[concat(variables('shortNamingPrefix'), 'jbox')]",
        "jumpBoxPublicIPAddressName": "[concat(variables('longNamingPrefix'), '-jumpbox-ip')]",
        "jumpBoxIPConfigName": "[concat(variables('longNamingPrefix'), '-jbox-ipconfig')]",
        "jumpBoxNicName": "[concat(variables('longNamingPrefix'), '-jbox-nic')]",
        "jumpBoxStorageAccountName":"[concat(variables('shortNamingPrefix'),'jboxstorage')]",
        "jumpBoxSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('externalSubnetName'))]",

        "computeApiVersion": "2017-03-30",
        "networkApiVersion": "2017-04-01",
        "storageApiVersion": "2015-06-15"
    },
    "resources": [
        {
            "apiVersion": "2016-06-01",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('computeLocation')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [                        
                        "[variables('externalSubnetPrefix')]",
                        "[variables('internalSubnetPrefix')]"
                    ]
                },
                "subnets": [                    
                    {
                        "name": "[variables('externalSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('externalSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('internalSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('internalSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"     
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                    "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('loadBalancerIpAddressName')]",
            "location": "[variables('computeLocation')]",
            "apiVersion": "2016-03-30",
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('longNamingPrefix'), '-external-tcp')]"
                }
            }
        },
        {
            "name": "[variables('diagnosticsStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-01-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "dependsOn": [],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "kind": "Storage"
        },        
        /* start jump box */
        {
            "name": "[variables('jumpBoxStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-01-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "dependsOn": [],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "kind": "Storage"
        },
        {
            "name": "[variables('jumpBoxNicName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "location": "[variables('computeLocation')]",
            "apiVersion": "2016-03-30",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[variables('jumpBoxIPConfigName')]",
                        "properties": {
                            "internalIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('jumpBoxSubnetRef')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "name": "[variables('jumpBoxName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('jumpBoxStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('jumpBoxNicName'))]"
            ],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_A1"
                },
                "osProfile": {
                    "computerName": "[variables('jumpBoxName')]",
                    "adminUsername": "[parameters('jumpBoxAdminUsername')]",
                    "adminPassword": "[parameters('jumpBoxAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "name": "[concat(variables('jumpBoxName'),'-disk')]",
                        "vhd": {
                            "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('jumpBoxStorageAccountName')), '2016-01-01').primaryEndpoints.blob, 'vhd/', variables('jumpBoxName'), '-disk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jumpBoxNicName'))]"
                        }
                    ]
                }
            }
        },
        {
            "name": "[variables('jumpBoxPublicIPAddressName')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "location": "[variables('computeLocation')]",
            "apiVersion": "2016-03-30",
            "dependsOn": [],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsName')]"
                }
            }
        },  
        {
           "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "apiVersion": "2017-06-01",
            "location": "[variables('computeLocation')]",
            "properties": {
                "securityRules": [
                    /* add open rules for IPs that need to access the jump box */
                    /* JB: allow ONLY :22 traffic from jumpbox */
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-jb-external-ssh')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.2.4",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-deny-jb-all')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "10.0.2.4",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Deny",
                            "priority": 1110,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }, 
                    /* end JB */  
                    /* allows azure internal traffic on the internal ES subnet for http and tcp */              
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-vnet-int-http')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2113",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "[variables('internalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-vnet-int-tcp')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "1113",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "[variables('internalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1210,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },                    
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-int-int')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "[variables('internalSubnetPrefix')]",
                            "destinationAddressPrefix": "[variables('internalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1220,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-any-ext-http')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2113",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-any-nat-tcp')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "1113-1123",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-ext-ext-http')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2113",
                            "sourceAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1400,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-allow-ext-ext-tcp')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "1113",
                            "sourceAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "destinationAddressPrefix": "[variables('externalSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 1410,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    /* deny everything else */
                    {
                        "name": "[concat(variables('networkSecurityGroupName'), '-rule-deny-all')]",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1500,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInBound",
                        "properties": {
                            "description": "Allow inbound traffic from azure load balancer",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticsStorageAccountName'))]"
            ],
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            }
        },
       {
           "apiVersion": "2015-06-15",
           "type": "Microsoft.Network/loadBalancers",
           "name": "[variables('loadBalancerName')]",
           "location": "[resourceGroup().location]",
           "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/',variables('jumpBoxPublicIPAddressName'))]"           
          ],
           "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            },
           "properties": {
            "frontendIPConfigurations": [
                {
                  "name": "[concat(variables('loadBalancerName'),'-external-ip-config')]",
                  "properties": {
                    "publicIPAddress": {
                      "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('loadBalancerIpAddressName'))]"
                    }
                  }
                }
            ],
            "probes":[
                {
                    "name": "[concat(variables('loadBalancerName'),'-http-probe')]",
                    "properties":{
                        "port": "2113",
                        "protocol": "Http",
                        "intervalInSeconds": 5,
                        "requestPath": "/web/index.html",
                        "numberOfProbes": 3
                    }
                }
            ],
            "loadBalancingRules":[
                {
                    "name": "[concat(variables('loadBalancerName'),'-http-lb')]", 
                    "properties":{
                        "backendPort": 2113,
                        "backendAddressPool": {
                            "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/', variables('loadBalancerName'),'-address-pool')]"
                        },
                        "probe":{
                            "id": "[concat(variables('loadBalancerId'),'/probes/',variables('loadBalancerName'),'-http-probe')]"
                        },
                        "frontendIPConfiguration":{
                            "id": "[concat(variables('loadBalancerId'),'/frontendIPConfigurations/',variables('loadBalancerName'),'-external-ip-config')]"
                        },
                        "frontendPort": 80,
                        "protocol": "Tcp"                        
                    }
                }
            ],
            "backendAddressPools": [
                {
                  "name": "[concat(variables('loadBalancerName'),'-address-pool')]",                  
                  "properties": {                      
                  }
                }
              ],
              "inboundNatPools": [                
                {                
                "name": "[concat(variables('loadBalancerName'),'-nat-pool')]",                
                "properties": {                
                    "frontendIPConfiguration": {                
                        "id": "[concat(variables('loadBalancerId'),'/frontendIPConfigurations/',variables('loadBalancerName'),'-external-ip-config')]"
                    },                
                    "protocol": "Tcp",                
                    "frontendPortRangeStart": 1113,                
                    "frontendPortRangeEnd": 1123,                
                    "backendPort": 1113                
                }                
                }                
            ]
           }
       },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[concat(variables('shortNamingPrefix'),'vmss')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "sku": {
              "name": "[parameters('vmSize')]",
              "tier": "Standard",
              "capacity": "[parameters('instanceCount')]"
            },
            "properties": {
              "overprovision": "false",
              "upgradePolicy": {
                "mode": "Automatic"
              },
              "virtualMachineProfile": {
                "storageProfile": {
                  "osDisk": {                    
                    "createOption": "FromImage",
                    "osType": "",
                    "managedDisk": {
                        "storageAccountType": "[parameters('storageAccountType')]"
                      }
                  },
                  "imageReference": "[variables('imageReference')]",
                  "dataDisks":[
                      {                          
                          "lun": 2,
                          "createOption": "Empty",
                          "diskSizeGB": "[parameters('storageSizeInGB')]",
                          "managedDisk":{
                              "storageAccountType":"[parameters('storageAccountType')]"
                          }
                      }
                      /* if you want the index drive separate, uncomment the below */                                            
                      /*,{                          
                        "lun": 3,
                        "createOption": "Empty",
                        "diskSizeGB": "256",
                        "managedDisk":{
                            "storageAccountType":"[parameters('storageAccountType')]"
                        }
                    }*/
                  ]
                },
                "osProfile": {
                  "computerNamePrefix": "[concat(variables('shortNamingPrefix'),'vmss')]",
                  "adminUsername": "[parameters('eventStoreAdminUsername')]",
                  "adminPassword": "[parameters('eventStoreAdminPassword')]"
                },
                "networkProfile": {
                  "networkInterfaceConfigurations": [
                    {
                      "name": "nic-external",
                      "properties": {
                        "primary": true,
                        "ipConfigurations": [
                          {
                            "name": "[concat(variables('ipConfigName'),'-external')]",
                            "properties": {
                              "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('externalSubnetName'))]"
                              },
                              "loadBalancerBackendAddressPools":[
                                  {
                                  "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/', concat(variables('loadBalancerName'),'-address-pool'))]"
                              }
                            ],
                            "loadBalancerInboundNatPools": [
                                {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('loadBalancerName'),'-nat-pool')]"                                    
                                }
                            ]
                            }
                          }
                        ],
                        "networkSecurityGroup": {
                            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                        }
                      }
                    },
                    {
                        "name": "nic-internal",
                        "properties": {
                            "primary": false,
                            "ipConfigurations": [
                                {
                                    "name": "[concat(variables('ipConfigName'),'-internal')]",
                                    "properties": {
                                        "subnet": {
                                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('internalSubnetName'))]"
                                        }
                                    }
                                }
                            ],
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                            }
                        }
                    }
                  ]
                }, 
                "extensionProfile": {
                    "extensions": [                            
                        {
                            "name": "run-post-setup",                            
                          "properties": {
                            "publisher": "Microsoft.OSTCExtensions",
                            "type": "CustomScriptForLinux",
                            "typeHandlerVersion": "1.4",
                            "autoUpgradeMinorVersion": false,
                            "settings": {
                              "fileUris": [
                                "https://raw.githubusercontent.com/AMGHDev/DevOps/master/Azure/ARM/EventStore/autopart.sh",
                                "https://raw.githubusercontent.com/AMGHDev/DevOps/master/Azure/ARM/EventStore/installes.sh",
                                "https://raw.githubusercontent.com/AMGHDev/DevOps/master/Azure/ARM/EventStore/installdup.sh",
                                "https://raw.githubusercontent.com/AMGHDev/DevOps/master/Azure/ARM/EventStore/setupall.sh"
                              ],
                              "commandToExecute": "sh setupall.sh"
                            }
                          }
                        }                                       
                    ]
                }
              }
            },
            "tags": {
                "resourceType": "Event Store",
                "eventStoreName": "[variables('eventStoreName')]"
            }
          } 
    ]
}